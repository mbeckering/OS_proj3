Version control: https://github.com/mbeckering/OS_proj3

.log extention will be auto-added to logfile name
master.log is default logfile name

For usage: ./oss -h

Log Output
----------
Log output: Had a couple unanswered questions, so I did my best and interpreted 
the instructions thusly:
Master: Child pid xxx is terminating at time xx:xx because it worked for xx:xx
and lived for xx:xx.
Where all times are from the sim clock. Termination time is the child's read 
from the sim clock as it's sending the termination message. "Worked for" is the 
amount that the child incremented to the sim clock. "Lived for" is the 
difference on the sim clock between when the child first accessed its critical 
section (i.e. first granted a time slice on the OSS's 'processor')
and the time it messaged master that it's terminating. I thought 
"child terminating at my time" was the master talking, but that would leave 
no reason for the child to send its sim clock termination time to the master, 
so I went with the above interpretation. I could add another crit section in 
the master to get its own time as well, if necessary.
Master: Creating new child pid 21944 at my time 01:825008728
This creation time is the master's sim clock read just before forking.

Random Number Generation
------------------------
I tuned the work time number generator up to 1-100,000,000 in order to decrease
my number of forks to a reasonable value. Emailed about the discrepancy of 
this number compared to the suggested 1-1,000,000 with a 100 fork limit but 
didn't get a response. I did my best with the random number generation but 
sometimes a couple concurrent processes still manage to roll the same work load 
despite using multiples of each child's own pid as seeds.

Critical Section Enforcement
----------------------------
I use two message queues: One for mutex protection of the sim clock for both 
master and children, and one for the slaves to notify the parent when they 
terminate and send the necessary information.

End readme 
